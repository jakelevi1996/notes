// Place your key bindings in this file to overwrite the defaults
[
    {
        "key": "alt+c",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly",
    },
    {
        "key": "shift+alt+c",
        "command": "editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly",
    },
    {
        "key": "ctrl+alt+c",
        "command": "copyRelativeFilePath",
    },
    {
        "key": "ctrl+shift+alt+c",
        "command": "copyFilePath",
    },
    {
        "key": "alt+r",
        "command": "python.execInTerminal",
        "when": "editorTextFocus",
    },
    {
        "key": "ctrl+r",
        "command": "workbench.action.terminal.runSelectedText",
        "when": "editorTextFocus",
    },
    {
        "key": "shift+alt+r",
        "command": "revealFileInOS",
    },
    {
        "key": "ctrl+alt+r",
        "command": "workbench.files.action.showActiveFileInExplorer",
    },
    {
        "key": "alt+s",
        "command": "extension.transpose",
        "when": "editorTextFocus && !editorReadonly",
    },
    {
        "key": "shift+alt+s",
        "command": "editor.action.insertCursorAtEndOfEachLineSelected",
        "when": "editorTextFocus",
    },
    {
        "key": "ctrl+d",
        "command": "runCommands",
        "args": {
            "commands": [
                "terminal.focus",
                "workbench.action.openPreviousRecentlyUsedEditor",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "code --diff ${file} ",
                    },
                },
                "workbench.action.openNextRecentlyUsedEditor",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "${file}\u000d",
                    },
                },
            ],
        },
    },
    {
        "key": "ctrl+shift+d",
        "command": "runCommands",
        "args": {
            "commands": [
                "terminal.focus",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "python -c \"from jutility import util; util.save_image_diff(\\\"${relativeFile}\\\", ",
                    },
                },
                "workbench.action.openPreviousRecentlyUsedEditor",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "\\\"${relativeFile}\\\", ",
                    },
                },
                "workbench.action.openNextRecentlyUsedEditor",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "\\\"vscode_diff\\\")\" && code \"${relativeFileDirname}/vscode_diff.png\"\u000d",
                    },
                },
            ],
        },
    },
    {
        "key": "ctrl+shift+alt+d",
        "command": "workbench.files.action.compareNewUntitledTextFiles",
    },
    {
        "key": "alt+d",
        "command": "editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly",
    },
    {
        "key": "shift+alt+d",
        "command": "workbench.action.debug.start",
        "when": "!inDebugMode",
    },
    {
        "key": "shift+alt+d",
        "command": "workbench.debug.action.toggleRepl",
        "when": "inDebugMode",
    },
    {
        "key": "alt+k",
        "command": "workbench.action.terminal.kill",
        "when": "!inDebugMode",
    },
    {
        "key": "alt+k",
        "command": "workbench.action.debug.stop",
        "when": "inDebugMode",
    },
    {
        "key": "alt+t",
        "command": "workbench.action.terminal.toggleTerminal",
    },
    {
        "key": "ctrl+t",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.action.terminal.new",
                "workbench.action.terminal.runSelectedText",
            ],
        },
    },
    {
        "key": "shift+alt+v",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.action.terminal.focus",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "git checkout -- \"${relativeFile}\"\u000d",
                    },
                },
            ],
        },
    },
    {
        "key": "ctrl+shift+-",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.action.terminal.focus",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "cp \"${relativeFile}\" \"${relativeFileDirname}${pathSeparator}${fileBasenameNoExtension}_copy${fileExtname}\" && code \"${relativeFileDirname}${pathSeparator}${fileBasenameNoExtension}_copy${fileExtname}\"\u000d",
                    },
                },
            ],
        },
    },
    {
        "key": "shift+alt+1",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.action.files.saveAll",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "\u001b[A\u000d",
                    },
                },
            ],
        },
    },
    {
        "key": "shift+alt+2",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.view.testing.focus",
                "testing.reRunLastRun",
            ],
        },
    },
    {
        "key": "shift+alt+3",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.view.testing.focus",
                "testing.reRunFailTests",
            ],
        },
    },
    {
        "key": "shift+alt+4",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.view.testing.focus",
                "testing.runAll",
            ],
        },
    },
    {
        "key": "shift+alt+5",
        "command": "runCommands",
        "args": {
            "commands": [
                "saveAll",
                "workbench.view.testing.focus",
                "testing.refreshTests",
            ],
        },
    },
    {
        "key": "shift+alt+t",
        "command": "workbench.action.terminal.new",
    },
    {
        "key": "alt+m",
        "command": "workbench.action.toggleMaximizedPanel",
    },
    {
        "key": "ctrl+alt+m",
        "command": "workbench.action.toggleEditorWidths",
    },
    {
        "key": "alt+a",
        "command": "git.stageSelectedRanges",
    },
    {
        "key": "shift+alt+a",
        "command": "runCommands",
        "args": {
            "commands": [
                "terminal.focus",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "git add -f ${relativeFile}\u000D",
                    },
                },
            ],
        },
    },
    {
        "key": "alt+u",
        "command": "git.unstageSelectedRanges",
    },
    {
        "key": "alt+v",
        "command": "git.revertSelectedRanges",
    },
    {
        "key": "alt+g",
        "command": "git.openChange",
        "when": "!inDiffEditor",
    },
    {
        "key": "alt+g",
        "command": "git.viewStagedChanges",
        "when": "inDiffEditor",
    },
    {
        "key": "ctrl+g",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.scm.focus",
                "list.focusFirst",
                "list.select",
            ],
        },
    },
    {
        "key": "ctrl+alt+g",
        "command": "git-graph.view",
    },
    {
        "key": "alt+n",
        "command": "workbench.action.editor.nextChange",
        "when": "editorTextFocus",
    },
    {
        "key": "alt+n",
        "command": "workbench.action.compareEditor.nextChange",
        "when": "textCompareEditorVisible",
    },
    {
        "key": "alt+b",
        "command": "workbench.action.editor.previousChange",
        "when": "editorTextFocus",
    },
    {
        "key": "alt+b",
        "command": "workbench.action.compareEditor.previousChange",
        "when": "textCompareEditorVisible",
    },
    {
        "key": "alt+p",
        "command": "runCommands",
        "args": {
            "commands": [
                "terminal.focus",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "git push\u000D",
                    },
                },
            ],
        },
    },
    {
        "key": "ctrl+alt+s",
        "command": "diffEditor.switchSide",
    },
    {
        "key": "ctrl+b",
        "command": "editor.action.selectToBracket",
        "when": "editorTextFocus",
    },
    {
        "key": "ctrl+n",
        "command": "explorer.newFile",
    },
    {
        "key": "ctrl+alt+v",
        "command": "markdown.showPreviewToSide",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'",
    },
    {
        "key": "alt+f",
        "command": "workbench.action.openRecent",
    },
    {
        "key": "ctrl+f5",
        "command": "workbench.action.reloadWindow",
        "when": "editorTextFocus",
    },
    {
        "key": "shift+alt+down",
        "command": "editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly",
    },
    {
        "key": "shift+alt+up",
        "command": "editor.action.copyLinesUpAction",
        "when": "editorTextFocus && !editorReadonly",
    },
    {
        "key": "alt+left",
        "command": "workbench.action.navigateBack",
    },
    {
        "key": "alt+right",
        "command": "workbench.action.navigateForward",
    },
    {
        "key": "ctrl+shift+o",
        "command": "editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus",
    },
]
