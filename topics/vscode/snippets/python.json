{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"import numpy as np": {
		"prefix": "import numpy as np",
		"body": [ "import numpy as np"],
		"description": "import numpy as np",
	},
	"import matplotlib pyplot as plt": {
		"prefix": "import matplotlib pyplot as plt",
		"body": [ "import matplotlib.pyplot as plt"],
		"description": "import matplotlib pyplot as plt",
	},
	"from jutility import plotting, util, cli": {
		"prefix": "from jutility import plotting, util, cli",
		"body": [ "from jutility import ${0:plotting, }util, cli"],
		"description": "from jutility import plotting, util, cli",
	},
	"CURRENT_DIR = os path dirname(os path abspath(__file__)) ...": {
		"prefix": "CURRENT_DIR = os path dirname(os path abspath(__file__)) ...",
		"body": [
			"${0:import os}",
			"CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))",
			"SOURCE_DIR  = os.path.abspath(os.path.join(CURRENT_DIR, \"..\", \"..\"))",
		],
		"description": "CURRENT_DIR = os path dirname(os path abspath(__file__)) ...",
	},
	"def main(...) ...": {
		"prefix": "def main(...) ...",
		"body": [
			"def main(",
			"    args: cli.ParsedArgs,",
			"    ${0:arg_name},",
			"):",
			"    ...",
		],
		"description": "def main(...) ...",
	},
	"def function(...) ...": {
		"prefix": "def function(...) ...",
		"body": [
			"def ${0:function_name}():",
			"    ...",
		],
		"description": "def function(...) ...",
	},
	"def method(self, ...) ...": {
		"prefix": "def method(self, ...) ...",
		"body": [
			"def ${0:method_name}(self):",
			"    ...",
		],
		"description": "def method(self, ...) ...",
	},
	"@classmethod def classmethod_name(cls, ...) ...": {
		"prefix": "@classmethod def classmethod_name(cls, ...) ...",
		"body": [
			"@classmethod",
			"def ${0:classmethod_name}(cls):",
			"    ...",
		],
		"description": "@classmethod def classmethod_name(cls, ...) ...",
	},
	"def __repr__(self) -> str: return util format_type(type(self), ...)": {
		"prefix": "def __repr__(self) -> str: return util format_type(type(self), ...)",
		"body": [
			"def __repr__(self) -> str:",
			"    return util.format_type(",
			"        type(self),",
			"        ${0:kwarg_name}=...,",
			"    )",
		],
		"description": "def __repr__(self) -> str: return util format_type(type(self), ...)",
	},
	"class ClassName: ...": {
		"prefix": "class ClassName: ...",
		"body": [
			"class ${0:ClassName}:",
			"    def __init__(self):",
			"        ...",
		],
		"description": "class ClassName: ...",
	},
	"rng = np random default_rng(...)": {
		"prefix": "rng = np random default_rng(...)",
		"body": [ "rng = np.random.default_rng(${0:0})"],
		"description": "rng = np random default_rng(...)",
	},
	"printer = util Printer(file_name, dir_name=OUTPUT_DIR)": {
		"prefix": "printer = util Printer(file_name, dir_name=OUTPUT_DIR)",
		"body": [
			"printer = util.Printer(${0:file_name}, dir_name=OUTPUT_DIR)",
		],
		"description": "printer = util Printer(file_name, dir_name=OUTPUT_DIR)",
	},
	"plotting plot(plotting Line(...))": {
		"prefix": "plotting plot(plotting Line(...))",
		"body": [
			"plotting.plot(",
			"    plotting.Line(${0:...}),",
			")",
		],
		"description": "plotting plot(plotting Line(...))",
	},
	"mp = plotting MultiPlot(...) ...": {
		"prefix": "mp = plotting MultiPlot(...) ...",
		"body": [
			"mp = plotting.MultiPlot(",
			"    plotting.Subplot(",
			"        plotting.Line(${0:...}),",
			"    ),",
			")",
			"mp.save()",
		],
		"description": "mp = plotting MultiPlot(...) ...",
	},
	"with util Timer(...) ...": {
		"prefix": "with util Timer(...) ...",
		"body": [
			"with util.Timer(\"${0:name}\"):",
			"    ...",
		],
		"description": "with util Timer(...) ...",
	},
	"parser = cli Parser(...)": {
		"prefix": "parser = cli Parser(...)",
		"body": [
			"parser = cli.Parser(",
			"    ${0:...}",
			")",
			"args = parser.parse_args()",
			"",
		],
		"description": "parser = cli Parser(...)",
	},
	"cli Arg(...),": {
		"prefix": "cli Arg(...),",
		"body": [
			"cli.Arg(\"${0:arg_name}\", type=str, default=None),",
		],
		"description": "cli Arg(...),",
	},
	"if __name__ == __main__: ...": {
		"prefix": "if __name__ == __main__: ...",
		"body": [
			"if __name__ == \"__main__\":",
			"    with util.Timer(\"main\"):",
			"        ${0:main}()",
		],
		"description": "if __name__ == __main__: ...",
	},
	"pytest mark parametrize(...)": {
		"prefix": "pytest mark parametrize(...)",
		"body": [
			"@pytest.mark.parametrize(",
			"    \"${0:arg_name_1, arg_name_2}\",",
			"    [],",
			")",
		],
		"description": "pytest mark parametrize(...)",
	},
	"with pytest raises(ValueError): ...": {
		"prefix": "with pytest raises(ValueError): ...",
		"body": [
			"with pytest.raises(${0:ValueError}):",
			"    ...",
		],
		"description": "with pytest raises(ValueError): ...",
	},
}
