{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"import numpy as np": {
		"prefix": "import numpy as np",
		"body": [ "import numpy as np"],
		"description": "import numpy as np",
	},
	"import matplotlib.pyplot as plt": {
		"prefix": "import matplotlib.pyplot as plt",
		"body": [ "import matplotlib.pyplot as plt"],
		"description": "import matplotlib.pyplot as plt",
	},
	"from jutility import plotting, util, cli": {
		"prefix": "from jutility import plotting, util, cli",
		"body": [ "from jutility import ${0:plotting, }util, cli"],
		"description": "from jutility import plotting, util, cli",
	},
	"def main(...) ...": {
		"prefix": "def main(...) ...",
		"body": [
			"def main(",
			"    args: cli.ParsedArgs,",
			"    ${0:arg_name},",
			"):",
			"    ...",
		],
		"description": "def main(...) ...",
	},
	"def function(...) ...": {
		"prefix": "def function(...) ...",
		"body": [
			"def ${0:function_name}():",
			"    ...",
		],
		"description": "def function(...) ...",
	},
	"def method(...) ...": {
		"prefix": "def method(...) ...",
		"body": [
			"def ${0:method_name}(self):",
			"    ...",
		],
		"description": "def method(...) ...",
	},
	"rng = np.random.default_rng(...)": {
		"prefix": "rng = np.random.default_rng(...)",
		"body": [ "rng = np.random.default_rng(${0:0})"],
		"description": "rng = np.random.default_rng(...)",
	},
	"plotting.plot(plotting.Line(x))": {
		"prefix": "plotting.plot(plotting.Line(x))",
		"body": [
			"plotting.plot(",
			"    plotting.Line(${0:x}),",
			")",
		],
		"description": "plotting.plot(plotting.Line(x))",
	},
	"mp = plotting.MultiPlot(...) ...": {
		"prefix": "mp = plotting.MultiPlot(...) ...",
		"body": [
			"mp = plotting.MultiPlot(",
			"    plotting.Subplot(",
			"        plotting.Line(${0:x}),",
			"    ),",
			")",
			"mp.save()",
		],
		"description": "mp = plotting.MultiPlot(...) ...",
	},
	"with util.Timer(...) ...": {
		"prefix": "with util.Timer(...) ...",
		"body": [
			"with util.Timer(\"${0:name}\"):",
			"    ...",
		],
		"description": "with util.Timer(...) ...",
	},
	"if __name__ == \"__main__\": ...": {
		"prefix": "if __name__ == \"__main__\": ...",
		"body": [
			"if __name__ == \"__main__\":",
			"    parser = cli.Parser(",
			"        cli.Arg(\"${0:arg_name}\", type=str, default=None),",
			"    )",
			"    args = parser.parse_args()",
			"",
			"    with util.Timer(\"main\"):",
			"        main(args, **args.get_kwargs())",
		],
		"description": "if __name__ == \"__main__\": ...",
	},
	"pytest.mark.parametrize(...)": {
		"prefix": "pytest.mark.parametrize(...)",
		"body": [
			"@pytest.mark.parametrize(",
			"    \"${0:arg_name_1, arg_name_2}\",",
			"    [],",
			")",
		],
		"description": "pytest.mark.parametrize(...)",
	},
}
